% mmp:batchprocess:batchprocess1_mmpmmpfolders;load droplist.matfor i=1:length(droplist)	drop_flag=1;	% READ ID INFO DEPENDING ONLY ON DROP	drop=droplist(i);	mmpid=read_mmpid(drop); 	cruise=read_cruises_mmp(drop);    [scanid,voffsetid] = read_config_mmp(mmpid,drop);	if isempty(mmpid)==1 | isempty(cruise)==1 ...	 | isempty(scanid)==1 | isempty(voffsetid)==1	 	drop_flag=0;	else		voffstr=['load ' setstr(39) mmpdatabase ':config:' mmpid ':' voffsetid '.mat' setstr(39)];		eval(voffstr);			end		% DISPLAY CURRENT DROP ON SCREEN	msg=['   drop=' num2str(drop)];	disp(msg)		% PRESSURE, pr	if drop_flag==1		ch=['pr']; % set data channel to process		[sensorid,electronicsid,filter,fc,scanpos] ...    	      = read_chconfig_mmp('pr',mmpid,drop);			prC=read_rawdata_mmp('pr',drop,scanid,scanpos);		prV=atod1_mmp(prC); clear prC;		calid=read_whichcal_mmp(ch,sensorid,drop);    	algorithm = read_algorithm_mmp(ch,drop);		if isempty(algorithm)~=1			prstr=['pr=' algorithm '_mmp(prV,sensorid,calid);'];			eval(prstr); clear prV;			prscan=scanavg1_mmp(pr);			%fstr=['save ' setstr(39) procdata ':' cruise ':pr:' num2str(drop) setstr(39) ' prscan'];			%eval(fstr); 			clear pr; % keep prscan for later use		else			msg=['pr not calculated for drop = ' num2str(drop)];			disp(msg)			drop_flag=0; break		end			clear ch sensorid electronicsid filter fc scanpos	end		% GET NUMBER OF DATA SCANS FROM LENGTH OF PR	if drop_flag==1		nscans=length(prscan);	end		% CLASSIFY DROP DIRECTION AS UP- OR DOWN-GOING		if drop_flag==1		if prscan(length(prscan)) > prscan(1)			direction=['down'];		elseif prscan(length(prscan)) < prscan(1)			direction=['up'];		else			direction=[];		end	end		% SEA-BIRD TEMPERATURE AND CONDUCTIVITY, tsbe & csbe	if drop_flag==1		ch=['tsbe'];				% set thetasd pressure		if strcmp(direction,'down')==1			pr_thetasd=prscan+0.01*offset_tsbe;		elseif strcmp(direction,'up')==1			pr_thetasd=prscan-0.01*offset_tsbe;		end			% read raw tsbe and convert to deg C		[sensorid,electronicsid,filter,fc,scanpos] ...          = read_chconfig_mmp(ch,mmpid,drop);			rawtsbe=read_rawdata_mmp(ch,drop,scanid,scanpos);		calid=read_whichcal_mmp(ch,sensorid,drop);    	algorithm = read_algorithm_mmp(ch,drop);		if isempty(algorithm)~=1			tstr=['tsbe=' algorithm '_mmp(rawtsbe,sensorid,calid);'];			eval(tstr);		else			msg=['temp not calculated for drop = ' num2str(drop)];			disp(msg);			drop_flag=0; break;		end		end	clear ch sensorid electronicsid filter fc scanpos a b c d f0 ...	 rawtsbe algorithm tstr	 	% read raw csbe and convert to conductivity	if drop_flag==1		ch=['csbe'];		[sensorid,electronicsid,filter,fc,scanpos] ...	  	  = read_chconfig_mmp(ch,mmpid,drop);			rawcsbe=read_rawdata_mmp(ch,drop,scanid,scanpos);		calid=read_whichcal_mmp(ch,sensorid,drop);		algorithm = read_algorithm_mmp(ch,drop);		if isempty(algorithm)~=1			cstr=['csbe=' algorithm '_mmp(rawcsbe,sensorid,calid,temp,pr_thetasd);'];			eval(cstr); 			clear rawcsbe sensorid calid electronicsid ...				filter fc scanpos		else			msg=['cond not calculated for drop = ' num2str(drop)];			disp(msg);			drop_flag=0; break;		end		end % end of csbe if loop		% complete thetasd by shifting csbe forward, low-passing tsbe 	% & csbe, then computing salinity, potemp, sigtheta	if drop_flag==1		shift=1;		[temp,csbe_lp,pr_thetasd]=lowpass_sbe_mmp(tsbe,csbe,pr_thetasd,shift);		nscans=length(temp);		salinity=salinityfcn(csbe_lp,temp,pr_thetasd);		theta=potemp(salinity,temp,pr_thetasd);		p0=0.*(1:nscans);		sigtheta=density(salinity,theta,p0);			% save thetasd data		str=['save ' setstr(39) procdata  ':' cruise ':thetasd:thetasd' ...              num2str(drop) '.mat' setstr(39) ' pr_thetasd temp salinity '  ...	          ' theta sigtheta ' ];		eval(str)		clear theta sigtheta cond p0 csbe_lp tsbe_lp	end % end of thetasd if loop	end % end of drop while loop