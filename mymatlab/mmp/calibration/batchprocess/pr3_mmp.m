function pr=pr3_mmp(drop,zero_shift,lowpass)% pr3_mmp%   Usage: pr=pr3_mmp(drop,zero_shift)%      drop is the integer drop number%      zero_shift is added to pressure, optional%      lowpass: string set to 'no' to supress low-pass filtering, optional%      pr is the pressure at the gauge%   Function: calculate pressure and apply zeroshift for %      Paros gauges in mmp1, mmp2, and mmp3 with the correction for%      internal gauge temperature.   Data are shifted%	   forward 1 scan to account for the offset produced by%      period counting, and the data are low-passed with a%      4-pole Butterworth with a 1 Hz cutoff frequency.%   M.Gregg, 08feb96%   7jul96: revised to shift data forward and low-pass filterTAUFR=327680;PASCAL_PER_PSI=6894.757;STD_ATMOS=0.101325; % MPaif nargin<2  zero_shift=0;endif nargin<3  lowpass='y';else  lowpass='n';end% read Paros pressure gauge calibrationmmpfolders;mmpid=read_mmpid(drop);[sensorid,electronicsid,filter,fc,scanpos] ...  = read_chconfig_mmp('pr',mmpid,drop);	calid=read_whichcal_mmp('pr',sensorid,drop);[C1,C2,C3,D1,D2,T1,T2,T3,T4,T5]= ...   read_Parospcal2_mmp(sensorid, calid);   % Read temperature data at the gauge and convert to deg Cprt_algorithm=read_algorithm_mmp('prt',drop);prt_str=['temp=' prt_algorithm '_mmp(drop);'];eval(prt_str)    % Compute coefficients including the temperature correctionC=C1+C2*temp+C3*temp.^2;D=D1+D2*temp;T0=T1+T2*temp+T3*temp.^2+T4*temp.^3+T5*temp.^4;% Read reference frequency, FRfr_calid=read_whichcal_mmp('fr', mmpid,drop);FR=read_frcal1_mmp(mmpid,fr_calid);% read rawdata as 2-column arraydataC=read_rawdata_mmp('pr',drop); n=length(dataC);if n<4   warning(['pr3_mmp: ' int2str(drop) ' has length(raw_pr)<4, so pr=[]']);   pr = [];   returnend% convert raw data in dataC to frequency in Hzf=zeros(1,n);f(1)=(dataC(1,1)*FR) ./ (TAUFR+dataC(1,2)-0);f(2:n)=(dataC(2:n,1)*FR) ...        ./ (TAUFR+dataC(2:n,2)-dataC(1:n-1,2));% convert from frequency to period in microsecondsT = 1e6 ./ f; T=T(:);% convert from period in micro-seconds to psiaaa=ones(size(T))-T0.^2.*ones(size(T))./(T.^2);pr=C.*aa .* (ones(size(T)) - D.*aa);% convert from psia to MPa sea pressurepr=pr*PASCAL_PER_PSI/1e6 - STD_ATMOS;if strcmp(lowpass,'y') | strcmp(lowpass,'yes')   if n>13      %Apply 4-pole Butterworth low-pass filter with 1 Hz cutoff      [b,a]=butter(4,1/12.5);      prlp=filtfilt(b,a,pr(2:n));      pr=prlp;   else      warning(['pr3_mmp: ' int2str(drop) ' has length(pr)<14, so pr=[]']);      pr = [];      return   endend   % Shift data forward one scan to compensate to shift introduced% by period countingpr=[pr(:); NaN];